/*****************************************************************************
 *                                                                           *
 *                  L I N K E D L I S T A L L O C A T O R                    *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Beschreibung:    Einfache Speicherverwaltung, welche den freien Speicher  *
 *                  mithilfe einer einfach verketteten Liste verwaltet.      *
 *                                                                           *
 * Autor:           Michael Schoettner, HHU, 13.6.2020                        *
 *****************************************************************************/

#include <stddef.h>
#include "kernel/Globals.h"
#include "kernel/allocator/LinkedListAllocator.h"

#define HEAP_MIN_FREE_BLOCK_SIZE 64         // min. Groesse eines freien Blocks


/*****************************************************************************
 * Methode:         LinkedListAllocator::init                                *
 *---------------------------------------------------------------------------*
 * Beschreibung:    Liste der Freispeicherbloecke intitialisieren.           *
 *                  Anker zeigt auf ein Dummy-Element. Danach folgt          *
 *                  ein Block der den gesamten freien Speicher umfasst.      *
 *                                                                           *
 *                  Wird automatisch aufgerufen, sobald eine Funktion der    *
 *                  Speicherverwaltung erstmalig gerufen wird.               *
 *****************************************************************************/
void LinkedListAllocator::init() {
	free_start = (free_block*)heap_start;
	free_start->size = heap_size;
	free_start->next = NULL;
}


/*****************************************************************************
 * Methode:         LinkedListAllocator::dump_free_memory                    *
 *---------------------------------------------------------------------------*
 * Beschreibung:    Ausgabe der Freispeicherliste. Zu Debuggingzwecken.      *
 *****************************************************************************/
void LinkedListAllocator::dump_free_memory() {

     /* Hier muess Code eingefuegt werden */

}


/*****************************************************************************
 * Methode:         LinkedListAllocator::alloc                               *
 *---------------------------------------------------------------------------*
 * Beschreibung:    Einen neuen Speicherblock allozieren.                    *
 *****************************************************************************/
void * LinkedListAllocator::alloc(unsigned int req_size) {
	if (req_size < sizeof(free_block)) req_size = sizeof(free_block);

	free_block* prev = NULL;
	free_block* current = free_start;
	while (1) {

		if (current->size >= req_size + sizeof(free_block)) {
			free_block* new_block = current + req_size;
			new_block->next = current->next;
			new_block->size = current->size - req_size;

			if (prev) {
				prev->next = new_block;
			} else {
				free_start = new_block;
			}

			return (void*)current;
		}

		if (current->next == NULL) {
			kout << "Error: Heap full, couldn't allocate block of size "<< hex << req_size << endl;
			dump_free_memory();
			return NULL;
		}

		prev = current;
		current = current->next;
	}
}


/*****************************************************************************
 * Methode:         LinkedListAllocator::free                                *
 *---------------------------------------------------------------------------*
 * Beschreibung:    Einen Speicherblock freigeben.                           *
 *****************************************************************************/
void LinkedListAllocator::free(void *ptr) {
	free_block* new_block = (free_block*)ptr;

	free_block* prev = NULL;
   	free_block* current = free_start;
   	while (1) {

	}

}
